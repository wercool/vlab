<!DOCTYPE html>
<html>
    <head>
        <meta charset=utf-8>
        <title>Collada</title>
        <style>
            body { margin: 0; }
            canvas { width: 100%; height: 100% }
        </style>
    </head>
    <body>

        <div id="container"><br /><br /><br /><br /><br />Loading...</div>

        <script src="js/three.js/three.min.js"></script>
        <script src="js/three.js/stats.min.js"></script>
        <script src="js/three.js/js/Detector.js"></script>
        <script src="js/three.js/js/controls/OrbitControls.js"></script>
        <script src="js/three.js/js/loaders/ColladaLoader.js"></script>

        <script>

            var toIntersect = [];

            // Detects webgl
            if ( ! Detector.webgl )
            {
                Detector.addGetWebGLMessage();
                document.getElementById( "container" ).innerHTML = "";
            }

            // Global variables
            var debug = true;

            //Collada scene variables
            var colladaSceneURL = "models/collada.dae";
            var colladaScene;

            // Graphics variables
            var container, stats;
            var camera, controls, scene, renderer;
            var clock = new THREE.Clock();
            var clickRequest = false;
            var mouseCoords = new THREE.Vector2();
            var raycaster = new THREE.Raycaster();
            var pos = new THREE.Vector3();
            var quat = new THREE.Quaternion();

            var meshes = [];
            var lights = [];


            init();
            animate();



            // - Functions -
            function init()
            {
                initGraphics();
                loadColladaScene();
                initInput();
            }

            function initGraphics()
            {
                container = document.getElementById( "container" );
                camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 2000 );

                scene = new THREE.Scene();

                var axis = new THREE.AxisHelper( 5 );
                scene.add(axis);

                camera.position.x = 0;
                camera.position.y = 5;
                camera.position.z = 15;

                controls = new THREE.OrbitControls( camera );
                controls.target.y = 2;

                renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
                renderer.setClearColor( 0xbfd1e5 );
                renderer.setPixelRatio( window.devicePixelRatio );
                renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.shadowMap.enabled = true;
                renderer.shadowMapSoft = true;
                renderer.shadowMap.type = THREE.PCFSoftShadowMap;


                container.innerHTML = "";

                container.appendChild( renderer.domElement );

                stats = new Stats();
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.top = '0px';
                container.appendChild( stats.domElement );

                window.addEventListener( 'resize', onWindowResize, false );
            }

            function loadColladaScene()
            {
                var loader = new THREE.ColladaLoader();
                loader.options.convertUpAxis = true;
                loader.load( colladaSceneURL, function ( collada ) {
                    colladaScene = collada.scene;
                    colladaScene.traverse(function ( object ) {
                        if (object instanceof THREE.Mesh)
                        {
                            object.position.x = object.parent.position.x;
                            object.position.y = object.parent.position.y;
                            object.position.z = object.parent.position.z;
                            meshes.push(object);
                        }
                        if (object instanceof THREE.PointLight)
                        {
                            object.position.x = object.parent.position.x;
                            object.position.y = object.parent.position.y;
                            object.position.z = object.parent.position.z;
                            lights.push(object);
                        }
                    });


                    for (var meshId in meshes)
                    {
                        scene.add(meshes[meshId]);
                    }
                    for (var lightId in lights)
                    {
                        scene.add(lights[lightId]);
console.log(lights[lightId].position);
                    }
                });
            }



            function onWindowResize()
            {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize( window.innerWidth, window.innerHeight );
            }

            function animate()
            {
                requestAnimationFrame( animate );
                render();
                stats.update();
            }


            function render()
            {
                var deltaTime = clock.getDelta();

                processClick();

                controls.update( deltaTime );
                renderer.render( scene, camera );
            }


            function initInput() 
            {

                window.addEventListener( 'mousedown', function( event ) {
                    if ( ! clickRequest && event.button == 0) {

                        mouseCoords.set(
                            ( event.clientX / window.innerWidth ) * 2 - 1,
                            - ( event.clientY / window.innerHeight ) * 2 + 1
                        );

                        clickRequest = true;

                    }
                    
                }, false );

            }

            function processClick() 
            {

                if ( clickRequest ) 
                {

                    raycaster.setFromCamera( mouseCoords, camera );
                    
                    var intersects = raycaster.intersectObjects( toIntersect ); 

                    if ( intersects.length > 0 ) 
                    {
                    }

                    clickRequest = false;

                }

            }

        </script>
    </body>
</html>
